#pragma once

// NTSTATUS		CreateCall(PDEVICE_OBJECT DeviceObject, PIRP IRP);
// NTSTATUS		CloseCall(PDEVICE_OBJECT DeviceObject, PIRP IRP);
// NTSTATUS		IoControl(PDEVICE_OBJECT DeviceObject, PIRP IRP);
// NTSTATUS		UnsupportedCall(_In_ struct _DEVICE_OBJECT *DeviceObject, _Inout_ struct _IRP *IRP);

PKSTART_ROUTINE UnloadDriverRoutine(PVOID arg1);

_Dispatch_type_(IRP_MJ_DEVICE_CONTROL)	DRIVER_DISPATCH IoControl;
_Dispatch_type_(IRP_MJ_CREATE)			DRIVER_DISPATCH CreateCall;
_Dispatch_type_(IRP_MJ_CLOSE)			DRIVER_DISPATCH CloseCall;

_Dispatch_type_(IRP_MJ_CREATE)
_Dispatch_type_(IRP_MJ_CREATE_NAMED_PIPE)
_Dispatch_type_(IRP_MJ_CLOSE)
_Dispatch_type_(IRP_MJ_READ)
_Dispatch_type_(IRP_MJ_WRITE)
_Dispatch_type_(IRP_MJ_QUERY_INFORMATION)
_Dispatch_type_(IRP_MJ_SET_INFORMATION)
_Dispatch_type_(IRP_MJ_QUERY_EA)
_Dispatch_type_(IRP_MJ_SET_EA)
_Dispatch_type_(IRP_MJ_FLUSH_BUFFERS)
_Dispatch_type_(IRP_MJ_QUERY_VOLUME_INFORMATION)
_Dispatch_type_(IRP_MJ_SET_VOLUME_INFORMATION)
_Dispatch_type_(IRP_MJ_DIRECTORY_CONTROL)
_Dispatch_type_(IRP_MJ_FILE_SYSTEM_CONTROL)
_Dispatch_type_(IRP_MJ_DEVICE_CONTROL)
_Dispatch_type_(IRP_MJ_INTERNAL_DEVICE_CONTROL)
_Dispatch_type_(IRP_MJ_SHUTDOWN)
_Dispatch_type_(IRP_MJ_LOCK_CONTROL)
_Dispatch_type_(IRP_MJ_CLEANUP)
_Dispatch_type_(IRP_MJ_CREATE_MAILSLOT)
_Dispatch_type_(IRP_MJ_QUERY_SECURITY)
_Dispatch_type_(IRP_MJ_SET_SECURITY)
_Dispatch_type_(IRP_MJ_POWER)
_Dispatch_type_(IRP_MJ_SYSTEM_CONTROL)
_Dispatch_type_(IRP_MJ_DEVICE_CHANGE)
_Dispatch_type_(IRP_MJ_QUERY_QUOTA)
_Dispatch_type_(IRP_MJ_SET_QUOTA)
_Dispatch_type_(IRP_MJ_PNP)
DRIVER_DISPATCH UnsupportedCall;

#define IO_READ_REQUEST			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0701, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_WRITE_REQUEST		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0702, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_INJECT_REQUEST		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0703, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_UNLOAD_REQUEST		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0704, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_BASE_ADDR_REQUEST	CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0795, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_SET_GAME_REQUEST		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0706, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

typedef struct _KERNEL_READ_REQUEST
{
	LONG		ProcessId;
	ULONG_PTR	Address;
	ULONG_PTR	Response;
	ULONG_PTR	Size;

} KERNEL_READ_REQUEST, *PKERNEL_READ_REQUEST;

typedef struct _KERNEL_WRITE_REQUEST
{
	LONG		ProcessId;
	ULONG_PTR	Address;
	ULONG_PTR	Value;
	ULONG_PTR	Size;

} KERNEL_WRITE_REQUEST, *PKERNEL_WRITE_REQUEST;

typedef struct _KERNEL_INJECT_REQUEST
{
	LONG		ProcessId;
	LONG		DllPathLength;
	const char *DllPath;

} KERNEL_INJECT_REQUEST, *PKERNEL_INJECT_REQUEST;

typedef struct _KERNEL_BASE_ADDR_REQUEST
{
	LONG		ProcessId;
	ULONG_PTR	Address;
	ULONG_PTR	Response;
	ULONG_PTR	Size;

} KERNEL_BASE_ADDR_REQUEST, *PKERNEL_BASE_ADDR_REQUEST;

typedef struct _KERNEL_SET_GAME_REQUEST
{
	LONG		GameId;	

} KERNEL_SET_GAME_REQUEST, *PKERNEL_SET_GAME_REQUEST;

